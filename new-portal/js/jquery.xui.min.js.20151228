/**
 * parser - jQuery xui
 *
 * Licensed under the GPL: http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
    $.parser = {
        /**
         * Example:
         * $.parser.parseOptions(target);
         * $.parser.parseOptions(target, ['id','title','width',{fit:'boolean',border:'boolean'},{min:'number'}]);
         */
        parseOptions: function(target, properties) {
            var t = $(target);
            var options = {};

            var s = $.trim(t.attr('data-options'));
            if (s) {
                if (s.substring(0, 1) == '[') { //对象数组支持
                    var arrayOptions = (new Function('return ' + s))();
                    $.each(arrayOptions, function(i, v) {
                        $.extend(options, v);
                    });
                } else {
                    if (s.substring(0, 1) != '{') {
                        s = '{' + s + '}';
                    }
                    options = (new Function('return ' + s))();
                }
            }

            if (properties) {
                var opts = {};
                for (var i = 0; i < properties.length; i++) {
                    var pp = properties[i];
                    if (typeof pp == 'string') {
                        if (pp == 'width' || pp == 'height' || pp == 'left' || pp == 'top') {
                            opts[pp] = parseInt(target.style[pp]) || undefined;
                        } else {
                            opts[pp] = t.attr(pp);
                        }
                    } else {
                        for (var name in pp) {
                            var type = pp[name];
                            if (type == 'boolean') {
                                opts[name] = t.attr(name) ? (t.attr(name) == 'true') : undefined;
                            } else if (type == 'number') {
                                opts[name] = t.attr(name) == '0' ? 0 : parseFloat(t.attr(name)) || undefined;
                            }
                        }
                    }
                }
                $.extend(options, opts);
            }
            return options;
        }
    };

    //设置box model宽度
    $.fn._outerWidth = function(width) {
        if (width == undefined) {
            return this.outerWidth() || 0;
        }
        return this.each(function() {
            $(this).width(width - ($(this).outerWidth() - $(this).width()));
        });
    };

    //设置box model高度
    $.fn._outerHeight = function(height) {
        if (height == undefined) {
            return this.outerHeight() || 0;
        }
        return this.each(function() {
            $(this).height(height - ($(this).outerHeight() - $(this).height()));
        });
    };
    
	$(window).resize(function() {
		$('body>.mask,body>.dialog').trigger('_resize');
	}).scroll(function() {
		$('body>.mask,body>.dialog').trigger('_scroll');
	});

})(jQuery);/**
 * mask - jQuery xui
 *
 * Licensed under the GPL: http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
	
	function init(target) {
        var state = $.data(target, 'mask');
        var opts = state.options;
        var cc = $(target).css('zoom', '1'); //ie6 bug

        var mask = $('<div class="mask"></div>').css('display', 'block').appendTo(cc);
        var maskMsg = $('<div class="mask-msg"></div>').html(opts.msg).css('display', 'block').appendTo(cc);

        state.mask = mask;
        state.maskMsg = maskMsg;
    }
    
    function setSize(target) {
        var state = $.data(target, 'mask');
        if (state) {
            var opts = state.options;
            var mask = state.mask;
            var maskMsg = state.maskMsg;
            var cc = $(target);

            var css = {
                left: 0,
                top: 0,
                width: cc.outerWidth(),
                height: cc.outerHeight()
            };

            if (cc[0].tagName == 'BODY') {
                $.extend(css, getPageArea());
            }

            mask.css(css);
            maskMsg.css({
                left: (mask.outerWidth() - maskMsg.outerWidth()) / 2,
                top: (mask.outerHeight() - maskMsg.outerHeight()) / 2
            });
        }
    }

    function bindEvents(target) {
    	$(target).unbind('.mask').bind('_resize.mask', function() {
    		setSize(target);
    	});
    }

    function show(target) {
        var state = $.data(target, 'mask');
        var mask = state.mask;
        var maskMsg = state.maskMsg;
        $('select:not([disabled])', target).addClass('mask-disabled-select').attr('disabled', 'disabled'); //ie6下的select的z-index bug
        mask.css('display', 'block');
        maskMsg.css('display', 'block');
        setSize(target);
        state.showCount++;
    }

    function hide(target) {
        var state = $.data(target, 'mask');
        state.showCount--;
       	state.showCount = Math.max(state.showCount, 0); //最小为0
        if (state.showCount <= 0) {
            var mask = state.mask;
            var maskMsg = state.maskMsg;
            $('select.mask-disabled-select').removeAttr('disabled');
            mask.css('display', 'none');
            maskMsg.css('display', 'none');
        }
    }

    function destroy(target) {
        var state = $.data(target, 'mask');
        var mask = state.mask;
        var maskMsg = state.maskMsg;
        $('select.mask-disabled-select').removeClass('mask-disabled-select').removeAttr('disabled');
        mask.remove();
        maskMsg.remove();
        $(target).removeData('mask');
        $(target).unbind('.mask');
    }

    function getPageArea() {
        return {
            width: Math.max(document.body.clientWidth, document.documentElement.clientWidth),
            height: Math.max(document.body.clientHeight, document.documentElement.clientHeight)
        }
    }

    $.fn.mask = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.mask.methods[options](this, param);
        }
        options = options || {};

        return this.each(function() {
            var state = $.data(this, 'mask');
            var opts;
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.mask.defaults, options);
                $.data(this, 'mask', {
                    showCount: 0,
                    options: opts
                });

                init(this);
            }

            if (opts.hide) {
                hide(this);
            } else {
                show(this);
            }

			setSize(this);
            bindEvents(this);
        });
    };

    $.fn.mask.methods = {
        show: function(jq) {
            jq.each(function() {
                show(this);
            });
        },
        hide: function(jq) {
            jq.each(function() {
                hide(this);
            });
        },
        destroy: function(jq) {
            jq.each(function() {
                destroy(this);
            });
        }
    }

    $.fn.mask.defaults = {
        msg: '处理中，请稍候',
        hide: false
    }
})(jQuery);
﻿
/**
 * linkbutton - jQuery xui
 *
 * Licensed under the GPL:
 *   http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
	
	function initDom(target) {
		var state = $.data(target, 'linkbutton');
        var opts = state.options;
        var t = $(target);
        
        opts.text = $.trim(t.html());
        
        t.empty().addClass('l-btn').removeClass('l-btn-plain');
		if (opts.plain){t.addClass('l-btn-plain')}
		
		var inner = $('<span class="l-btn-left"></span>').appendTo(t);
		if (opts.text){
			$('<span class="l-btn-text"></span>').html(opts.text).appendTo(inner);
		} else {
			$('<span class="l-btn-text l-btn-empty">&nbsp;</span>').appendTo(inner);
		}
		if (opts.iconCls){
			$('<span class="l-btn-icon">&nbsp;</span>').addClass(opts.iconCls).appendTo(inner);
			inner.addClass('l-btn-icon-left');
		}
	}

    function setDisabled(target, disabled) {
        var state = $.data(target, 'linkbutton');
        var opts = state.options;
        
        if (disabled) {
            opts.disabled = true;
            var href = $(target).attr('href');
            if (href) {
                state.href = href;
                $(target).attr('href', 'javascript:void(0)');
            }
            if (target.onclick) {
                state.onclick = target.onclick;
                target.onclick = null;
            }
			
			$(target).addClass('l-btn-disabled');
			if($(target).hasClass('l-btn-plain')) { //plain
				$(target).addClass('l-btn-plain-disabled');
			}
        } else {
            opts.disabled = false;
            if (state.href) {
                $(target).attr('href', state.href);
            }
            if (state.onclick) {
                target.onclick = state.onclick;
            }
			
			$(target).removeClass('l-btn-disabled l-btn-plain-disabled');
        }
    }

    $.fn.linkbutton = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.linkbutton.methods[options](this, param);
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this, 'linkbutton');
            var opts;
            if (state) {
                opts = $.extend(state.options, options);
            } else {
            	opts = $.extend({}, $.fn.linkbutton.defaults, $.fn.linkbutton.parseOptions(this), options)
                $.data(this, 'linkbutton', {
                    options: opts
                });
                
                if(opts.initDom) {
                	initDom(this);
                }
            }
            
            setDisabled(this, opts.disabled);
        });
    };

    $.fn.linkbutton.methods = {
        options: function(jq) {
            return $.data(jq[0], 'linkbutton').options;
        },
        enable: function(jq) {
            return jq.each(function() {
                setDisabled(this, false);
            });
        },
        disable: function(jq) {
            return jq.each(function() {
                setDisabled(this, true);
            });
        }
    };

    $.fn.linkbutton.parseOptions = function(target) {
        return $.parser.parseOptions(target);
    };

    $.fn.linkbutton.defaults = {
    	initDom: false,
    	disabled: false,
    	plain: false,
    	text: '',
    	iconCls: null
    };

})(jQuery);
/**
 * validatebox - jQuery xui
 *
 * Licensed under the GPL: http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
    function init(target) {
    };

    function bindEvents(target) {
        var opts = $.data(target, 'tooltip').options;
        var t = $(target);
        
        t.unbind('.tooltip');
        if(opts.showEvent) {
	        t.bind(opts.showEvent + '.tooltip', function(e) {
	            $(target).tooltip('show', e);
	        })
    	}
        if(opts.hideEvent) {
	        t.bind(opts.hideEvent + '.tooltip', function(e) {
	            $(target).tooltip('hide', e);
	        });
    	}
    };

    function clearTimer(target) {
        var state = $.data(target, 'tooltip');
        if (state.showTimer) {
            clearTimeout(state.showTimer);
            state.showTimer = null;
        }
        if (state.hideTimer) {
            clearTimeout(state.hideTimer);
            state.hideTimer = null;
        }
    };

    function reposition(target) {
        var state = $.data(target, 'tooltip');
        if (!state || !state.tip) {
            return;
        }
        var opts = state.options;
        var tip = state.tip;
        var position = {
            left: -100000,
            top: -100000
        };
        if ($(target).is(':visible')) {
            position = calcPosition(opts.position);
        }
        tip.css({
            left: position.left,
            top: position.top,
            zIndex: (opts.zIndex != undefined ? opts.zIndex : '') //TODO
        });

        function calcPosition(position) {
            opts.position = position || 'bottom';
            tip.removeClass('tooltip-top tooltip-bottom tooltip-left tooltip-right').addClass('tooltip-' + opts.position);
            var left, top;
            var t = $(target);
            left = t.offset().left + opts.deltaX;
            top = t.offset().top + opts.deltaY;
            switch (opts.position) {
                case 'right':
                    left += t._outerWidth() + 6;
                    top -= (tip._outerHeight() - t._outerHeight()) / 2;
                    break;
                case 'left':
                    left -= tip._outerWidth() + 6;
                    top -= (tip._outerHeight() - t._outerHeight()) / 2;
                    break;
                case 'top':
                    left -= (tip._outerWidth() - t._outerWidth()) / 2;
                    top -= tip._outerHeight() + 6;
                    break;
                case 'bottom':
                    left -= (tip._outerWidth() - t._outerWidth()) / 2;
                    top += t._outerHeight() + 6;
                    break;
            }
            return {
                left: left,
                top: top
            };
        };
    };

    function show(target, e) {
        var state = $.data(target, 'tooltip');
        var opts = state.options;
        var tip = state.tip;
        if (!tip) {
            tip = $('<div class="tooltip">'+
				'<div class="tooltip-content"></div>'+
				'<div class="tooltip-arrow-outer"></div>'+
				'<div class="tooltip-arrow"></div>'+
				'</div>').appendTo('body');
            state.tip = tip;
            update(target);
        }
        clearTimer(target);
        state.showTimer = setTimeout(function() {
            reposition(target);
            tip.show();
            opts.onShow.call(target, e);
            var outer = tip.children('.tooltip-arrow-outer');
            var arrow = tip.children('.tooltip-arrow');
            var bc = "border-" + opts.position + "-color";
            outer.add(arrow).css({
                borderTopColor: "",
                borderBottomColor: "",
                borderLeftColor: "",
                borderRightColor: ""
            });
            outer.css(bc, tip.css(bc));
            arrow.css(bc, tip.css("backgroundColor"));
        }, opts.showDelay);
    };

    function hide(target, e) {
        var state = $.data(target, 'tooltip');
        if (state && state.tip) {
            clearTimer(target);
            state.hideTimer = setTimeout(function() {
                state.tip.hide();
                state.options.onHide.call(target, e);
            }, state.options.hideDelay);
        }
    };

    function update(target, content) {
        var state = $.data(target, 'tooltip');
        var opts = state.options;
        if (content) {
            opts.content = content;
        }
        if (!state.tip) {
            return;
        }
        state.tip.find('.tooltip-content').html(opts.content);
        reposition(target);
        opts.onUpdate.call(target, opts.content);
    };

    function destroy(target) {
        var state = $.data(target, 'tooltip');
        if (state) {
            clearTimer(target);
            var opts = state.options;
            if (state.tip) {
                state.tip.remove();
            }

            $.removeData(target, 'tooltip');
            $(target).unbind('.tooltip');
            opts.onDestroy.call(target);
        }
    };
    $.fn.tooltip = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.tooltip.methods[options](this, param);
        }
        options = options || {};
        return this.each(function() {
            var state = $.data(this, 'tooltip');
            if (state) {
                $.extend(state.options, options);
            } else {
                $.data(this, 'tooltip', {
                    options: $.extend({}, $.fn.tooltip.defaults, $.fn.tooltip.parseOptions(this), options)
                });
                init(this);
            }
            bindEvents(this);
            update(this);
        });
    };
    $.fn.tooltip.methods = {
        options: function(jq) {
            return $.data(jq[0], 'tooltip').options;
        },
        tip: function(jq) {
            return $.data(jq[0], 'tooltip').tip;
        },
        show: function(jq, e) {
            return jq.each(function() {
                show(this, e);
            });
        },
        hide: function(jq, e) {
            return jq.each(function() {
                hide(this, e);
            });
        },
        update: function(jq, content) {
            return jq.each(function() {
                update(this, content);
            });
        },
        destroy: function(jq) {
            return jq.each(function() {
                destroy(this);
            });
        }
    };
    $.fn.tooltip.parseOptions = function(target) {
        return $.parser.parseOptions(target);
    };
    $.fn.tooltip.defaults = {
        position: 'bottom',
        content: null,
        deltaX: 0,
        deltaY: 0,
        showEvent: 'mouseenter',
        hideEvent: 'mouseleave',
        showDelay: 100,
        hideDelay: 100,
        onShow: function(e) {},
        onHide: function(e) {},
        onUpdate: function(content) {},
        onDestroy: function() {}
    };
})(jQuery);
/**
 * validatebox - jQuery xui
 *
 * Licensed under the GPL: http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {

    function init(target) {
        $(target).addClass('validatebox-text');
    }

    function destroy(target) {
        var state = $.data(target, 'validatebox');
        var opts = state.options;
        var tipTarget = opts.handler.tip(target);
        
        if (state.timer) {
            clearTimeout(state.timer);
        }
        
        tipTarget.tooltip('destroy');
        $(target).unbind('.validatebox');
        $(target).removeData('validatebox');
    }

    function bindEvents(target) {
        var state = $.data(target, 'validatebox');
        var opts = state.options;  
        var box = $(target);
        var tipTarget = opts.handler.tip(target);   

        if (state.timer) {
            clearTimeout(state.timer);
            state.timer = undefined;
        }
        box.unbind('.validatebox');
        if (opts.novalidate) {
            return;
        }
        box.bind('focus.validatebox', function() {
            state.validating = true;
            state.value = undefined;
            (function() {
                if (state.validating) {
                    if (state.value != box.val()) {
                        state.value = box.val();
                        if (state.timer) {
                            clearTimeout(state.timer);
                        }
                        state.timer = setTimeout(function() {
                            if(validate(target) == false) {
                            	showTip(target);
                            }
                        }, opts.delay);
                    }
                    setTimeout(arguments.callee, 200);
                }
            })();
        }).bind('blur.validatebox', function() {
            if (state.timer) {
                clearTimeout(state.timer);
                state.timer = undefined;
            }
            state.validating = false;
            
            //validate(this);
            hideTip(target);
        }).bind('mouseover.validatebox', function() {
            if (tipTarget.hasClass('validatebox-invalid')) {
                showTip(target);
            }
        }).bind('mouseout.validatebox', function() {
            if (!state.validating) {
                hideTip(target);
            }
        });
    }


    function showTip(target) {
        var state = $.data(target, 'validatebox');
        var opts = state.options;
        var tipTarget = opts.handler.tip(target);
        tipTarget.tooltip($.extend({}, opts.tipOptions, {
            content: state.message,
            position: opts.tipPosition,
            deltaX: opts.deltaX
        })).tooltip('show');
        state.tip = true;
    }

    function hideTip(target) {
        var state = $.data(target, 'validatebox');
        var opts = state.options;
        var tipTarget = opts.handler.tip(target);
        state.tip = false;
        tipTarget.tooltip('hide');
    }

    function validate(target) {
        var state = $.data(target, 'validatebox');
        var opts = state.options;
        var tip = state.tip;
        var box = $(target);        
        var value = box.val();
        var tipTarget = opts.handler.tip(target);

        function setTipMessage(msg) {
            $.data(target, 'validatebox').message = msg;
        }
        
        function validateRule(validType) {
        	var result = /([a-zA-Z_]+)(.*)/.exec(validType);
            var rule = opts.rules[result[1]];
            if (value && rule) {
                var param = eval(result[2]);
                if (!rule['validator'].call(target, value, param)) {
                    tipTarget.addClass('validatebox-invalid');

                    var message = rule['message'];
                    if (param) {
                        for (var i = 0; i < param.length; i++) {
                            message = message.replace(new RegExp('\\{' + i + '\\}', 'g'), param[i]);
                        }
                    }
                    setTipMessage(opts.invalidMessage || message);
                    return false;
                }
            }
            
            return true;
        }

        if (opts.novalidate || box.is(':disabled')) {
            return true;
        }

        if (opts.required) {
            if (value === '' || value === null) {
                tipTarget.addClass('validatebox-invalid');
                setTipMessage(opts.missingMessage);
                return false;
            }
        }
        if (opts.validType) {
        	if ($.isArray(opts.validType)) {
        		for (var i = 0; i < opts.validType.length; i++) {
                    if (!validateRule(opts.validType[i])) {
                        return false;
                    }
                }
        	} else {
        		if(!validateRule(opts.validType)) {
        			return false;
        		}
        	}
        }

        tipTarget.removeClass('validatebox-invalid');
        hideTip(target);
        
        return true;
    }

    function disableValidate(target, disable) {
        var opts = $.data(target, 'validatebox').options;
        var tipTarget = opts.handler.tip(target);
        if (disable != undefined) {
            opts.novalidate = disable;
        }
        if (opts.novalidate) {
            tipTarget.removeClass('validatebox-invalid');
            hideTip(target);
        }
        bindEvents(target);
    };

    $.fn.validatebox = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.validatebox.methods[options](this, param);
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this, 'validatebox');
            if (state) {
                $.extend(state.options, options);
            } else {
                $.data(this, 'validatebox', {
                    options: $.extend({}, $.fn.validatebox.defaults, $.fn.validatebox.parseOptions(this), options)
                });
            }
			init(this);
            bindEvents(this);
        });
    };

    $.fn.validatebox.parseOptions = function(target) {
        return $.extend({}, $.parser.parseOptions(target));
    };

    $.fn.validatebox.methods = {
    	options: function(jq) {
            return $.data(jq[0], 'validatebox').options;
        },
        destroy: function(jq) {
            return jq.each(function() {
                destroy(this);
            });
        },
        validate: function(jq) {
            return jq.each(function() {
                validate(this);
            });
        },
        isValid: function(jq) {
            return validate(this[0]);
        },
        enableValidation: function(jq) {
            return jq.each(function() {
                disableValidate(this, false);
            });
        },
        disableValidation: function(jq) {
            return jq.each(function() {
                disableValidate(this, true);
            });
        }
    };

    $.fn.validatebox.defaults = {
        required: false,
        validType: null,
        delay: 200,
        missingMessage: '该输入项为必输项',
        invalidMessage: null,
        novalidate: false,
        tipPosition: 'right',
        deltaX: 5,
        tipOptions: {
        	showEvent: null,
        	hideEvent: null,
            onShow: function() {
                $(this).tooltip('tip').css({
                    color: '#000',
                    borderColor: '#CC9933',
                    backgroundColor: '#FFFFCC'
                });
            }
        },
        handler: {
            tip: function(target) {
            	//返回jquery对象
                return $(target);
            }
        },
        rules: {
            email: {
                validator: function(value) {
                    return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
                },
                message: '请输入有效的电子邮件地址'
            },
            url: {
                validator: function(value) {
                    return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
                },
                message: '请输入有效的URL地址'
            },
            length: {
                validator: function(value, param) {
                    var len = $.trim(value).length;
                    return len >= param[0] && len <= param[1]
                },
                message: '输入内容长度必须介于{0}和{1}之间'
            }
        }
    };
})(jQuery);
/**
 * select2 - jQuery xui
 *
 * Licensed under the GPL:
 *   http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
	
	function init(target) {
    	$(target).addClass('select2');
    }
	
    function setDisabled(target, disabled) {
    	var state = $.data(target, 'select2');
        var opts = state.options;
        if (disabled) {
            opts.disabled = true;
            $(target).attr('disabled', 'disabled');
        } else {
            opts.disabled = false;
            $(target).removeAttr('disabled');
        }
    }

    //获取值
    function getValue(target) {
        return $(target).val();
    }

    //设置值
    function setValue(target, value) {
        $(target).val(value);
    }

    //加载数据
    function loadData(target, data) {
        var state = $.data(target, 'select2');
        var opts = state.options;
        state.data = opts.loadFilter.call(target, data);
        data = state.data;

        var dd = ['<option value="">--请选择--</option>'];
        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            var v = item[opts.valueField];
            var s = item[opts.textField];

            dd.push('<option value="' + v + '">');
            dd.push(opts.formatter ? opts.formatter.call(target, item) : s);
            dd.push('</option>');
        }
        $(target).html(dd.join(''));
        opts.onLoadSuccess.call(target, data);
    }

    //请求远程数据
    function request(target, url, param) {
        var opts = $.data(target, 'select2').options;
        if (url) {
            opts.url = url;
        }
        if (!opts.url)
            return;
        param = param || {};

        if (opts.onBeforeLoad.call(target, param) == false)
            return;

        $.ajax({
            type: opts.method,
            url: opts.url,
            data: $.toJSON(param),
            contentType: 'application/json',
            dataType: 'json',
            success: function(data) {
                loadData(target, data.rows);
            },
            error: function() {
                opts.onLoadError.apply(this, arguments);
            }
        });
    }

    $.fn.select2 = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.select2.methods[options](this, param);
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this, 'select2');
            var opts;
            
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.select2.defaults, $.fn.select2.parseOptions(this), options);
                state = $.data(this, 'select2', {
                    options: opts,
                    data: []
                });
                init(this);
            }
            
            if (opts.data) {
                loadData(this, opts.data);
            }
            request(this);

            setDisabled(this, opts.disabled);
        });
    };


    $.fn.select2.methods = {
        options: function(jq) {
            return $.data(jq[0], 'select2').options;
        },
        getData: function(jq) {
            return $.data(jq[0], 'select2').data;
        },
        getValue: function(jq) {
            return getValue(jq[0]);
        },
        setValue: function(jq, value) {
            return jq.each(function() {
                setValue(this, [value]);
            });
        },
        disable: function(jq) {
            return jq.each(function() {
                setDisabled(this, true);
            });
        },
        enable: function(jq) {
            return jq.each(function() {
                setDisabled(this, false);
            });
        },
        clear: function(jq) {
            return jq.each(function() {
                $(this).html('');
            });
        },
        loadData: function(jq, data) {
            return jq.each(function() {
                loadData(this, data);
            });
        },
        reload: function(jq, url) {
            return jq.each(function() {
                request(this, url);
            });
        }
    };

    $.fn.select2.parseOptions = function(target) {
        return $.extend({}, $.parser.parseOptions(target));
    };

    $.fn.select2.defaults = {
        valueField: 'value',
        textField: 'text',
        mode: 'local', // or 'remote'
        method: 'post',
        url: null,
        data: null,
        formatter: function(row) {
            var opts = $(this).select2('options');
            return row[opts.textField];
        },
        loadFilter: function(data) {
            return data;
        },
        onBeforeLoad: function(param) {},
        onLoadSuccess: function() {},
        onLoadError: function() {}
    };
})(jQuery);
/**
 * combobox - jQuery xui
 *
 * Licensed under the Apache v2
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
    
    function initDom(target) {
		var state = $.data(target, 'combobox');
        var opts = state.options;
        var t = $(target).addClass('combobox-text');
        
        var combo = t.wrap('<span class="combobox"></span>').parent();
        state.combo = combo;
        
        $('<input type="hidden" class="combobox-value">').attr('name', t.attr('name')).appendTo(combo);
        
        if(opts.hasArrow) {
        	$('<span class="combobox-addon"><i class="combobox-icon combobox-arrow"></i></span>').appendTo(combo);
        }
        
        t.removeAttr('name');
	}
	
    function init(target) {
    	var state = $.data(target, 'combobox');
    	var opts = state.options;
    	var combo = state.combo;
    	
    	$(target).addClass('combobox-f');
    	
        var panel = $('<ul class="combobox-panel"></ul>').appendTo('body');
        
		state.panel = panel;
		
		$('.combobox-text', combo).validatebox($.extend({
			required: opts.required,
			validType: opts.validType,
			novalidate: opts.novalidate
		},  opts.validateOptions));
    }

    function setSize(target) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var combo = state.combo;
        var panel = state.panel;
        
        var addonWidth = 20; //t.children('.combobox-addon').width();
        combo.children('.combobox-text')._outerWidth(combo.width()-addonWidth);
    }

    function bindEvents(target) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var combo = state.combo;
        var panel = state.panel;
        
        var input = combo.children('.combobox-text');
        var arrow = combo.children('.combobox-addon');
        var items = panel.children('li.combobox-item');

        //全局事件
        $(document).unbind('.combobox').bind('mousedown.combobox', function(e) {
            //隐藏没有击中的combobox的下拉面板
            var p = $(e.target).closest('ul.combobox-panel');
            var panels = $('body>ul.combobox-panel:visible');
            if (p.length) {
                panels = panels.not(p[0]);
            }
            p = $(e.target).closest('.combobox-f');
            if (p.length) {
                p = p.combobox('panel');
                panels = panels.not(p);
            }
            panels.css('display', 'none');
        }).bind('mousewheel.combobox', function(e) {
            //滚动页面时隐藏下拉面板
            var p = $(e.target).closest('ul.combobox-panel');
            var panels = $('body>ul.combobox-panel:visible');
            if (p.length) {
                panels = panels.not(p[0]);
            }
            panels.css('display', 'none');
        });

        //先取消绑定事件
        input.unbind('.combobox');
        arrow.unbind('.combobox');
        items.unbind('.combobox');

        if (!opts.disabled) {
        	input.bind('click.combobox', function(e) {
	            togglePanel(target);
	        }).bind('keydown.combobox', function(e) {
                switch (e.keyCode) {
                    case 37: //left
                    case 38: //up
                        nav(target, 'prev');
                        break;
                    case 39: //right
                    case 40: //down
                        nav(target, 'next');
                        break;
                    case 13: //enter
                        onEnter(target);
                        break;
                    case 9: //tab
                    case 27: //esc
                        hidePanel(target);
                        break;
                    default:
                        if (state.timer) {
                            clearTimeout(state.timer);
                        }
                        state.timer = setTimeout(function() {
                            var q = input.val();
                            if (state.previousValue != q) {
                                state.previousValue = q;
                                showPanel(target);
                                onQuery(target, q);
                            }
                            if(e.keyCode == 8 && q == '') { //backspace
                            	clear(target);
                            }
                        }, opts.delay);
                        break;
                }
            });
            
            //下拉箭头
            arrow.bind('click.combobox', function() {
                //聚焦且光标放到文本最后
                input.focus().val(input.val());
                togglePanel(target);
            });
            
            //下拉选项
            items.bind('mouseover.combobox', function() {
                $(this).addClass('combobox-item-hover');
            }).bind('mouseout.combobox', function() {
                $(this).removeClass('combobox-item-hover');
            }).bind('click.combobox', function(e) {
                var value = $(this).attr('data-value');
                select(target, value);
                hidePanel(target);
            });
        }
    }

    //显示下拉面板
    function showPanel(target) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var combo = state.combo;
        var panel = state.panel;
		
        panel.css({
            left: calcLeft(),
            top: calcTop(),
            display: 'block',
            width: combo.width(),
            height: opts.panelHeight-2,
            zIndex: ($.fn.dialog ? $.fn.dialog.defaults.zIndex++ : opts.zIndex)
        });
        
        scrollTo(target, $(target).combobox('getValue'));
              
        function calcLeft() {
            var left = combo.offset().left;
            
            if (left + combo.outerWidth() > $(window).outerWidth() + $(document).scrollLeft()) {
                left = $(window).outerWidth() + $(document).scrollLeft() - combo.outerWidth();
            }
            if (left < 0) {
                left = 0;
            }
            return left;
        };
        
        function calcTop() {
        	var top = combo.offset().top + combo.outerHeight();
            if (top + opts.panelHeight > $(window).outerHeight() + $(document).scrollTop()) {
                top = combo.offset().top - opts.panelHeight;
            }
            if (top < $(document).scrollTop()) {
                top = combo.offset().top + combo.outerHeight();
            }
            return top;
        }
    }

    //隐藏下拉面板
    function hidePanel(target) {
        var panel = $.data(target, 'combobox').panel;
        panel.css('display', 'none');
    }

    //切换下拉面板
    function togglePanel(target) {
        var panel = $.data(target, 'combobox').panel;

        if (panel.is(':visible')) {
            hidePanel(target);
        } else {
            showPanel(target);
        }
    }

    function findDataItem(data, key, value) {
        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            if (item[key] == value) {
                return item
            }
        }
        return null;
    }

    function scrollTo(target, value) {
        var state = $.data(target, 'combobox');
        var panel = state.panel;
		
		var item = panel.children('li.combobox-item[data-value="' + value + '"]');
        if (item.length) {
            if (item.position().top <= 0) {
                var h = panel.scrollTop() + item.position().top;
                panel.scrollTop(h);
            } else if (item.position().top + item.outerHeight() > panel.height()) {
                var h = panel.scrollTop() + item.position().top + item.outerHeight() - panel.height();
                panel.scrollTop(h);
            }
        }
    }

    function nav(target, dir) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var panel = state.panel;

        var item = panel.children('li.combobox-item-hover');
        if (!item.length) {
            item = panel.children('li.combobox-item-selected');
        }
        item.removeClass('combobox-item-hover');
        if (!item.length) {
            item = panel.children('li.combobox-item:visible:' + (dir == 'next' ? 'first' : 'last'));
        } else {
            if (dir == 'next') {
                item = item.nextAll('li.combobox-item:visible:first');
                if (!item.length) {
                    item = panel.children('li.combobox-item:visible:first');
                }
            } else {
                item = item.prevAll('li.combobox-item:visible:first');
                if (!item.length) {
                    item = panel.children('li.combobox-item:visible:last');
                }
            }
        }
        
        if (item.length) {
            item.addClass('combobox-item-hover');
            scrollTo(target, item.attr('data-value'));
        }
    }

    function select(target, value) {
    	var state = $.data(target, 'combobox');
        var opts = state.options;
        var data = state.data;
        
        setValue(target, value);

        var item = findDataItem(data, opts.valueField, value);
        if (item) {
            opts.onSelect.call(target, item);
        }
    }

    function setDisabled(target, disabled) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var combo = state.combo;
        
        if (disabled) {
            opts.disabled = true;
            combo.children('input.combobox-text').attr('disabled', 'disabled');
        } else {
            opts.disabled = false;
            combo.children('input.combobox-text').removeAttr('disabled');
        }
    }

    function getValue(target) {
        var state = $.data(target, 'combobox');
        var combo = state.combo;

        return combo.children('input.combobox-value').val();
    }

    function setValue(target, value, remainText) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var data = state.data;
        var combo = state.combo;
        var panel = state.panel;
        state.previousValue = undefined; //清空query
        
        var oldValue = getValue(target);

        var item = findDataItem(data, opts.valueField, value);
        var text;
        if (item) {
            text = item[opts.textField];
        }
        panel.children('li.combobox-item-selected').removeClass('combobox-item-selected');
        panel.children('li.combobox-item[data-value="' + value + '"]').addClass('combobox-item-selected');
        //值
        combo.children('input.combobox-value').val(value);
        //文本
        if(!remainText) {
        	combo.children('input.combobox-text').val(text);
    	}
        
        if(oldValue != value) {
       		opts.onChange.call(target, value, oldValue);
       	}
       	$('.combobox-text', combo).validatebox('validate');
    }
    
    function clear(target) {
        var state = $.data(target, 'combobox');
        var combo = state.combo;
        var panel = state.panel;
        state.previousValue = undefined; //清空query
        
        //panel.children('li.combobox-item').removeClass('combobox-item-selected').show();
        //combo.children('input.combobox-value,input.combobox-text').val('');
        setValue(target, null);
    }

    //加载数据
    function loadData(target, data, remainText) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var panel = state.panel;
        
        data = data || [];
        state.data = opts.loadFilter.call(target, data);
        data = state.data;

        var dd = [];
        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            var v = item[opts.valueField];
            var s = item[opts.textField];

            dd.push('<li class="combobox-item" data-value="' + v + '">');
            dd.push(opts.formatter ? opts.formatter.call(target, item) : s);
            dd.push('</li>');
        }
        
        panel.html(dd.join(''));
		
		setValue(target, getValue(target), remainText);

        opts.onLoadSuccess.call(target, data);
    }

    //请求远程数据
    function request(target, url, param, remainText) {
        var opts = $.data(target, 'combobox').options;
        if (url) {
            opts.url = url;
        }
        if (!opts.url)
            return;
        param = param || {};

        if (opts.onBeforeLoad.call(target, param) == false)
            return;

        $.ajax({
            type: opts.method,
            url: opts.url,
            data: $.toJSON(param),
            contentType: 'application/json',
            dataType: 'json',
            success: function(data) {
            	if(data.code == 0) {
            		loadData(target, data.rows, remainText);
                	bindEvents(target);
            	}
            },
            error: function() {
                opts.onLoadError.apply(this, arguments);
            }
        });
    }

    function onQuery(target, q) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var data = state.data;
        var panel = state.panel;
        
        if (opts.mode == 'remote') {
            request(target, null, {
                q: q
            }, true);
        } else {
            panel.children('li.combobox-item').hide();
            for (var i = 0; i < data.length; i++) {
                var item = data[i];
                if (opts.filter.call(target, q, item)) {
                    var v = item[opts.valueField];
                    panel.children('li.combobox-item[data-value="' + v + '"]').show();
                }
            }
        }
    }

    function onEnter(target) {
        var state = $.data(target, 'combobox');
        var opts = state.options;
        var data = state.data;
        var panel = state.panel;

        var item = panel.children('li.combobox-item-hover');
        if (!item.length) {
            item = panel.children('li.combobox-item-selected');
        }
        if (!item.length) {
            return;
        }

        select(target, item.attr('data-value'));
        hidePanel(target);
    }

    $.fn.combobox = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.combobox.methods[options](this, param);
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this, 'combobox');
            var opts;
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.combobox.defaults, $.fn.combobox.parseOptions(this), options);
                state = $.data(this, 'combobox', {
                    options: opts,
                    data: []
                });
                
                state.combo = $(this);
                if(opts.initDom) {
                	initDom(this);
                }
				init(this);
            }
            if (opts.data) {
                loadData(this, opts.data);
            }
            request(this);

            setDisabled(this, opts.disabled);
            //setSize(this);
            bindEvents(this);
        });
    };


    $.fn.combobox.methods = {
        options: function(jq) {
            return $.data(jq[0], 'combobox').options;
        },
        getData: function(jq) {
            return $.data(jq[0], 'combobox').data;
        },
        panel: function(jq) {
            return $.data(jq[0], 'combobox').panel;
        },
        getValue: function(jq) {
            return getValue(jq[0]);
        },
        setValue: function(jq, value) {
            return jq.each(function() {
                setValue(this, value);
            });
        },
        disable: function(jq) {
            return jq.each(function() {
                setDisabled(this, true);
                bindEvents(this);
            });
        },
        enable: function(jq) {
            return jq.each(function() {
                setDisabled(this, false);
                bindEvents(this);
            });
        },
        clear: function(jq) {
            return jq.each(function() {
                clear(this);
            });
        },
        loadData: function(jq, data) {
            return jq.each(function() {
                loadData(this, data);
                bindEvents(this);
            });
        },
        reload: function(jq, url) {
            return jq.each(function() {
                request(this, url);
            });
        },
        select: function(jq, value) {
            return jq.each(function() {
                select(this, value);
            });
        }
    };

    $.fn.combobox.parseOptions = function(target) {
        return $.extend({}, $.parser.parseOptions(target,['width']));
    };

    $.fn.combobox.defaults = {
    	initDom: false,
    	zIndex: null,
        panelWidth: null,
        panelHeight: 200,
        disabled: false,
        valueField: 'value',
        textField: 'text',
        mode: 'local', // or 'remote'
        method: 'post',
        url: null,
        data: null,
        hasArrow: true,
        delay: 200,
        validateOptions: {
            handler: {
	            tip: function(target) {
	            	//返回jquery对象
	                return $(target).parent();
	            }
	        }
        },
        filter: function(q, row) {
            var opts = $(this).combobox('options');
            return row[opts.textField].toLowerCase().indexOf(q.toLowerCase()) >= 0;
        },
        formatter: function(row) {
            var opts = $(this).combobox('options');
            return row[opts.textField];
        },
        loadFilter: function(data) {
            return data;
        },
        onBeforeLoad: function(param) {},
        onLoadSuccess: function() {},
        onLoadError: function() {},
        onSelect: function(record) {},
        onChange: function(newValue, oldValue) {}
    };
})(jQuery);/**
 * form - jQuery xui
 *
 * Licensed under the GPL:
 *   http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 * 依赖
 *   mask
 */
(function($) {
    /**
     * ajax提交表单
     */
    function ajaxSubmit(target, options) {
        options = options || {};

        if (options.onSubmit) {
            if (options.onSubmit.call(target) == false) {
                return;
            }
        }

        var form = $(target);
        if (!options.url) {
            options.url = form.attr('action');
        }

        form.mask().mask('show');
        $.ajax({
            type: 'POST',
            url: options.url,
            contentType: 'application/json',
            dataType: 'json',
            data: $.toJSON(form.serialize()),
            success: function(data) {
                form.mask('hide');
                options.success.call(target, data);
            },
            error: function() {
                form.mask('hide');
            }
        });
    }

    /**
     * 加载表单数据
     * 如果data是string类型则代表URL,从远程加载数据
     * 否则加载本地object
     */
    function load(target, data) {
        if (typeof data == 'string') {
            $.ajax({
                url: data,
                dataType: 'json',
                success: function(data) {
                    _load(data);
                }
            });
        } else {
            _load(data);
        }

        function _load(data) {
            var form = $(target);
            for (var name in data) {
                var val = data[name];
                $('input[name="' + name + '"]', form).val(val);
                $('textarea[name="' + name + '"]', form).val(val);
                $('select[name="' + name + '"]', form).val(val);
                if ($.fn.combobox) {
                    var box = $('input[name="' + name + '"]', form).closest('.combobox');
                    var boxf = box.filter('.combobox-f');
                    if(boxf.length > 0) {
                    	boxf.combobox('setValue', val);
                    } else {
                    	box.find('.combobox-f').combobox('setValue', val);
                    }
                }
            }
        }
    }

    /**
     * 清空表单
     */
    function clear(target) {
        $('input,select,textarea', target).each(function() {
            var t = this.type,
                tag = this.tagName.toLowerCase();
            if (t == 'text' || t == 'password' || tag == 'textarea')
                this.value = '';
            else if (t == 'checkbox' || t == 'radio')
                this.checked = false;
            else if (tag == 'select')
                this.selectedIndex = -1;

        });
        
        if ($.fn.combobox) {
            $('.combobox-f', target).combobox('clear');
        }
    }

    /**
     * 重置表单
     */
    function reset(target) {
        target.reset();
    }

    /**
     * 验证表单
     */
    function validate(target) {
        if ($.fn.validatebox) {
            var t = $(target);
            t.find('.validatebox-text:not(:disabled)').validatebox('validate');
            var invalidbox = t.find('.validatebox-invalid');
            invalidbox.filter(':not(:disabled):first').focus();
            return invalidbox.length == 0;
        }
        return true;
    }
    
    function setValidation(target, novalidate){
		$(target).find('.validatebox-text:not(:disabled)').validatebox(novalidate ? 'disableValidation' : 'enableValidation');
	}
	
	function setEditable(target, editable){
		if(editable) {
			$('input[type!="button"],textarea', target).removeAttr('readonly');
			$('select', target).removeAttr('disabled');
			$('.combobox-f', target).combobox('enable');
			//data-editable
			$('input[data-editable="false"],textarea[data-editable="false"]', target).attr('readonly', 'readonly');
			$('select[data-editable="false"]', target).attr('disabled', 'disabled');
			$('.combobox-f[data-editable="false"]', target).combobox('disable');
		} else {
			$('input[type!="button"],textarea', target).attr('readonly', 'readonly');
			$('select', target).attr('disabled', 'disabled');
			$('.combobox-f', target).combobox('disable');
		}
	}

    $.fn.form = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.form.methods[options](this, param);
        }
    };

    $.fn.form.methods = {
        submit: function(jq, options) {
            return jq.each(function() {
                ajaxSubmit(this, $.extend({}, $.fn.form.defaults, options || {}));
            });
        },
        load: function(jq, data) {
            return jq.each(function() {
                load(this, data);
            });
        },
        clear: function(jq) {
            return jq.each(function() {
                clear(this);
            });
        },
        reset: function(jq) {
            return jq.each(function() {
                reset(this);
            });
        },
        validate: function(jq) {
            return validate(jq[0]);
        },
		disableValidation: function(jq){
			return jq.each(function(){
				setValidation(this, true);
			});
		},
		enableValidation: function(jq){
			return jq.each(function(){
				setValidation(this, false);
			});
		},
		disableEditable: function(jq){
			return jq.each(function(){
				setEditable(this, false);
			});
		},
		enableEditable: function(jq){
			return jq.each(function(){
				setEditable(this, true);
			});
		}
    };

    $.fn.form.defaults = {
        url: null,
        onSubmit: function() {},
        success: function(data) {}
    };
})(jQuery);
/**
 * pagination - jQuery xui
 *
 * Licensed under the GPL:
 *   http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
 
    function init(target) {
        var opts = $.data(target, 'pagination').options;
        var t = $(target).addClass('pagination');

        var pager = [];
        pager.push('<table border="0" cellspacing="0" cellpadding="0">');
        pager.push('<tbody>');
        pager.push('<tr>');
        if (opts.showPageList) {
            pager.push('<td><select class="pagination-page-list">');
            for (var i = 0; i < opts.pageList.length; i++) {
                if (opts.pageSize == opts.pageList[i]) {
                    pager.push('<option selected>' + opts.pageList[i] + '</option>');
                } else {
                    pager.push('<option>' + opts.pageList[i] + '</option>');
                }
            }
            pager.push('</select></td>');
            pager.push('<td><div class="pagination-btn-separator"></div></td>');
        }
        pager.push('<td><a class="l-btn l-btn-plain pagination-btn-first" href="javascript:void(0)">');
        pager.push('<span class="l-btn-left l-btn-icon-left">');
        pager.push('<span class="l-btn-text l-btn-empty">&nbsp;</span>');
        pager.push('<span class="l-btn-icon pagination-first">&nbsp;</span>');
        pager.push('</span>');
        pager.push('</a></td>');
        pager.push('<td><a class="l-btn l-btn-plain pagination-btn-prev" href="javascript:void(0)">');
        pager.push('<span class="l-btn-left l-btn-icon-left">');
        pager.push('<span class="l-btn-text l-btn-empty">&nbsp;</span>');
        pager.push('<span class="l-btn-icon pagination-prev">&nbsp;</span>');
        pager.push('</span>');
        pager.push('</a></td>');
        pager.push('<td><div class="pagination-btn-separator"></div></td>');
        pager.push('<td><span style="padding-left: 6px;">第</span></td>');
        pager.push('<td><input class="pagination-num" type="text" size="2" value="1"></td>');
        pager.push('<td><span class="pagination-after-page" style="padding-right: 6px;">共{pages}页</span></td>');
        pager.push('<td><div class="pagination-btn-separator"></div></td>');
        pager.push('<td><a class="l-btn l-btn-plain pagination-btn-next" href="javascript:void(0)">');
        pager.push('<span class="l-btn-left l-btn-icon-left">');
        pager.push('<span class="l-btn-text l-btn-empty">&nbsp;</span>');
        pager.push('<span class="l-btn-icon pagination-next">&nbsp;</span>');
        pager.push('</span>');
        pager.push('</a></td>');
        pager.push('<td><a class="l-btn l-btn-plain pagination-btn-last" href="javascript:void(0)">');
        pager.push('<span class="l-btn-left l-btn-icon-left">');
        pager.push('<span class="l-btn-text l-btn-empty">&nbsp;</span>');
        pager.push('<span class="l-btn-icon pagination-last">&nbsp;</span>');
        pager.push('</span>');
        pager.push('</a></td>');
        if (opts.showRefresh) {
            pager.push('<td><div class="pagination-btn-separator"></div></td>');
            pager.push('<td><a class="l-btn l-btn-plain pagination-btn-reload" href="javascript:void(0)">');
            pager.push('<span class="l-btn-left l-btn-icon-left">');
            pager.push('<span class="l-btn-text l-btn-empty">&nbsp;</span>');
            pager.push('<span class="l-btn-icon pagination-load">&nbsp;</span>');
            pager.push('</span>');
            pager.push('</a></td>');
        }
        pager.push('</tr>');
        pager.push('</tbody>');
        pager.push('</table>');
        pager.push('<div class="pagination-info">共{total}条记录</div>');
        pager.push('<div style="clear: both;"></div>');

        t.html(pager.join('')).find('.l-btn').linkbutton();;
    }

    function bindEvents(target) {
        var opts = $.data(target, 'pagination').options;
        var t = $(target);

        $('.pagination-btn-first', t).unbind('.pagination').bind('click.pagination', function() {
            if (opts.pageNumber > 1) {
                selectPage(target, 1);
            }
        });
        $('.pagination-btn-prev', t).unbind('.pagination').bind('click.pagination', function() {
            if (opts.pageNumber > 1) {
                selectPage(target, opts.pageNumber - 1);
            }
        });
        $('.pagination-btn-next', t).unbind('.pagination').bind('click.pagination', function() {
            var pageCount = Math.ceil(opts.total / opts.pageSize);
            if (opts.pageNumber < pageCount) {
                selectPage(target, opts.pageNumber + 1);
            }
        });
        $('.pagination-btn-last', t).unbind('.pagination').bind('click.pagination', function() {
            var pageCount = Math.ceil(opts.total / opts.pageSize);
            if (opts.pageNumber < pageCount) {
                selectPage(target, pageCount);
            }
        });
        $('.pagination-btn-reload', t).unbind('.pagination').bind('click.pagination', function() {        	
            selectPage(target, opts.pageNumber);
        });
        $('.pagination-num', t).unbind('.pagination').bind('keydown.pagination', function(e) {
            if (e.keyCode == 13) {
                var pageNumber = parseInt($(this).val()) || 1;
                selectPage(target, pageNumber);
            }
        });
        $('.pagination-page-list', t).unbind('.pagination').bind('change.pagination', function() {
            opts.pageSize = $(this).val();
            selectPage(target, opts.pageNumber);
        });
    }

    function selectPage(target, pageNumber) {
        var opts = $.data(target, 'pagination').options;
        var pageCount = Math.ceil(opts.total / opts.pageSize);
        if (pageNumber > pageCount) pageNumber = pageCount;
        if (pageNumber < 1) pageNumber = 1; //页码最小是1
        opts.onSelectPage.call(target, pageNumber, opts.pageSize);
        opts.pageNumber = pageNumber;
        showPagerInfo(target);
    }

    function showPagerInfo(target) {
        var opts = $.data(target, 'pagination').options;
        var t = $(target);
        var pageCount = Math.ceil(opts.total / opts.pageSize);

        if (pageCount < 1) { //总页码数最小是1
            pageCount = 1;
        }
        $('.pagination-num', t).val(opts.pageNumber);
        $('.pagination-after-page', t).text(opts.afterPageText.replace(/{pages}/, pageCount));
        $('.pagination-info', t).text(opts.displayMsg.replace(/{total}/, opts.total));

        $('.pagination-btn-first,.pagination-btn-prev', t).linkbutton((opts.pageNumber == 1) ? 'disable' : 'enable');
        $('.pagination-btn-next,.pagination-btn-last', t).linkbutton((opts.pageNumber == pageCount) ? 'disable' : 'enable');
    }
    
    function setLoading(target, loading) {
        var state = $.data(target, "pagination");
        var opts = state.options;
        var t = $(target);
        
        var icon = $('.pagination-btn-reload .l-btn-icon', t).removeClass('pagination-load pagination-loading');
        
        opts.loading = loading;
        
        icon.addClass(opts.loading ? 'pagination-loading' : 'pagination-load');
    };

    $.fn.pagination = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.pagination.methods[options](this, param);
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this, 'pagination');
            var opts;
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.pagination.defaults, options);
                $.data(this, 'pagination', {
                    options: opts
                });
                init(this);
            }
            
            bindEvents(this);
            showPagerInfo(this);
        });
    };

    $.fn.pagination.methods = {
        options: function(jq) {
            return $.data(jq[0], 'pagination').options;
        },
        loading: function(jq) {
            return jq.each(function() {
                setLoading(this, true);
            });
        },
        loaded: function(jq) {
            return jq.each(function() {
                setLoading(this, false);
            });
        },
        select: function(jq, param) {
            return jq.each(function() {
                selectPage(this, param);
            });
        }
    };

    $.fn.pagination.parseOptions = function(target) {
        return $.parser.parseOptions(target);
    };

    $.fn.pagination.defaults = {
        total: 0,
        pageSize: 10,
        pageNumber: 1,
        pageList: [10, 20, 50, 100],
        showPageList: true,
        showRefresh: true,
        beforePageText: '第',
        afterPageText: '共{pages}页',
        displayMsg: '共{total}条记录',
        onSelectPage: function(pageNumber, pageSize) {},
        onChangePageSize: function(pageSize) {}
    };
})(jQuery);/**
 * datagrid - jQuery xui
 *
 * Licensed under the Apache v2
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 * 依赖
 *	linkbutton
 *	pagination
 */
(function($) {
	
	function initDom(target) {
		var state = $.data(target, 'datagrid');
		var t = $(target).addClass('datagrid-table');
		$('>thead>tr', t).addClass('datagrid-header-row').find('th').each(function(i, domEle){
			var thOpts = $.parser.parseOptions(domEle);
			var jq = $(domEle);
			if(thOpts.rownumber) {
				jq.addClass('datagrid-header-rownumber');
			} else if(thOpts.checkbox) {
				jq.addClass('datagrid-td-check').html('<div class="datagrid-header-check"><input type="checkbox"></div>');
			}
		});
		
		var dg = $('<div class="datagrid">'
		+ '<div class="datagrid-header"></div>'
		+ '<div class="datagrid-body">'
		+ '<div class="datagrid-view"></div>'
		+ '</div>'
		+ '</div>');
		state.datagrid = dg;
		
		var title = t.attr('title');
		if(title) {
			dg.children('.datagrid-header').html(title);
		} else {
			dg.children('.datagrid-header').remove();
		}
		
		t.after(dg);
		$('>.datagrid-body>.datagrid-view', dg).append(t);
	}
 
    function wrapGrid(target) {
    	var state = $.data(target, 'datagrid');
    	var datagrid = state.datagrid;
    	var table = $('.datagrid-table', datagrid);
    	state.table = table;
    	
        var columns = getColumns($('thead', table));

        function getColumns(thead) {
            var columns = [];
            $('tr', thead).each(function() {
                var cols = [];
                $('th', this).each(function() {
                    var th = $(this);

                    var col = $.extend({
                        title: th.html()
                    }, $.parser.parseOptions(this, [
                        'align', 'width', {
                            rowspan: 'number',
                            colspan: 'number'
                        }
                    ]));

                    cols.push(col);
                });
                columns.push(cols);
            });

            return columns;
        }

        return {
            columns: columns
        };
    }
 
    function buildBody(target, rows) {
    	var state = $.data(target, 'datagrid');
        var opts = state.options;
        var pagination = opts.pagination;
        var fields = getColumnFields(opts.columns);
        
        var body = [];
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            if (i % 2 && opts.striped) {
                body.push('<tr class="datagrid-row datagrid-row-alt" datagrid-row-index="' + i + '">');
            } else {
                body.push('<tr class="datagrid-row" datagrid-row-index="' + i + '">');
            }

			var rownumber = i + 1;
            if (pagination) {
                rownumber += (opts.pageNumber - 1) * opts.pageSize;
            }
            
            for (var j = 0; j < fields.length; j++) {
                var field = fields[j];
                var col = getColumnOption(opts.columns, field);
                if (col) {
                	
                	if(col.rownumber) {
                		body.push('<td class="datagrid-td-rownumber">');
                	} else if (col.checkbox) {
                		body.push('<td class="datagrid-td-check">');
                	} else {
                    	body.push('<td class="datagrid-cell" field="' + field + '">');
                	}
					
					if (col.rownumber) {
                        body.push('<div class="datagrid-cell-rownumber">'+rownumber+'</div>');
                    } else if (col.checkbox) {
                        body.push('<div class="datagrid-cell-check"><input type="checkbox"/></div>');
                    } else if (col.formatter) {
                        body.push(col.formatter(row[field], row, i));
                    } else {
                        body.push(row[field]);
                    }
                    body.push('</td>');
                }
            }
            body.push('</tr>');
        }

        state.table.children('tbody').html(body.join(''));
    }

	function buildToolbar(target) {
		var state = $.data(target, 'datagrid');
		var datagrid = state.datagrid;
		var opts = state.options;
		var tool = $('>.datagrid-body>.datagrid-toolbar', datagrid);
		if(opts.toolbar) {
			if(tool.length == 0) {
				$(opts.toolbar).addClass('datagrid-toolbar').prependTo($('>.datagrid-body', datagrid));
			}
		}
        tool.children('.l-btn').linkbutton();
    }

    function buildPagination(target) {
        var state = $.data(target, 'datagrid');
        var datagrid = state.datagrid;
        var opts = state.options;
        var pagination = opts.pagination;
        var pager = $('>.datagrid-body>.datagrid-pager', datagrid);
        state.pager = pager;
        
        if (pagination) {
        	if(pager.length == 0) {
        		pager = $('<div class="datagrid-pager"></div>').appendTo(datagrid.children('.datagrid-body'));
        		state.pager = pager;
        	}
        	
            pager.pagination({
                pageNumber: opts.pageNumber,
                pageSize: opts.pageSize,
                pageList: opts.pageList,
                onSelectPage: function(pageNum, pageSize) {
                    // 保存分页状态
                    opts.pageNumber = pageNum;
                    opts.pageSize = pageSize;
        
                    request(target); // 请求远程数据
                }
            });
        }
    }

    function bindEvents(target) {
    	var state = $.data(target, 'datagrid');
    	var table = state.table;
        var opts = state.options;
        var data = state.data;
        
        //body事件
        $('>tbody>tr>td>div.datagrid-cell-check>input[type="checkbox"]', table).unbind('.datagrid').bind('click.datagrid', function(e) {
            e.stopPropagation();
            
            var rowIndex = $(this).parent().parent().parent().attr('datagrid-row-index');
            var rowData = data.rows[rowIndex];
            
            if ($(this).prop('checked')) {
                opts.onCheck.call(target, rowIndex, rowData);
            } else {
                opts.onUncheck.call(target, rowIndex, rowData);
            }
        });

        $('>tbody>tr', table).unbind('.datagrid').bind('click.datagrid', function() {
            var index = $(this).attr('datagrid-row-index');
            if (!$(this).hasClass('datagrid-row-selected')) {
                selectRow(target, index);
            }

            if (opts.onClickRow) {
                opts.onClickRow.call(this, index, data.rows[index]);
            }
        });

        //header事件
        $('>thead>tr>th>div.datagrid-header-check>input[type="checkbox"]', table).unbind('.datagrid').bind('click.datagrid', function() {
            if ($(this).prop('checked')) {
                $('>tbody>tr>td>div.datagrid-cell-check>input[type="checkbox"]', table).prop('checked', true);
                opts.onCheckAll.call(target, data.rows);
            } else {
                $('>tbody>tr>td>div.datagrid-cell-check>input[type="checkbox"]', table).prop('checked', false);
                opts.onUncheckAll.call(target, data.rows);
            }
        });
    }

    function getColumnOption(columns, field) {
        if (columns) {
            for (var i = 0; i < columns.length; i++) {
                var cols = columns[i];
                for (var j = 0; j < cols.length; j++) {
                    var col = cols[j];
                    if (col.field == field) {
                        return col;
                    }
                }
            }
        }
        return null;
    }

    function getColumnFields(columns) {
        if (columns.length == 0) return [];

        function getFields(ridx, cidx, count) {
            var fields = [];
            while (fields.length < count) {
                var col = columns[ridx][cidx];
                if (col.colspan && col.colspan > 1) {
                    var ff = getFields(ridx + 1, getSubColIndex(ridx, cidx), col.colspan);
                    fields = fields.concat(ff);
                } else if (col.field) {
                    fields.push(col.field);
                }
                cidx++;
            }

            return fields;
        }

        function getSubColIndex(ridx, cidx) {
            var index = 0;
            for (var i = 0; i < cidx; i++) {
                var colspan = columns[ridx][i].colspan || 1;
                if (colspan > 1) {
                    index += colspan;
                }
            }
            return index;
        }

        var fields = [];
        for (var i = 0; i < columns[0].length; i++) {
            var col = columns[0][i];
            if (col.colspan && col.colspan > 1) {
                var ff = getFields(1, getSubColIndex(0, i), col.colspan);
                fields = fields.concat(ff);
            } else if (col.field) {
                fields.push(col.field);
            }
        }

        return fields;
    }

    function getColumnColspan(columns) {
        var column = columns[0];
        var colspan = 0;
        for (var i = 0; i < column.length; i++) {
            colspan += (column[i].colspan || 1);
        }
        return colspan;
    }

    function loadData(target, data) {
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var pagination = opts.pagination;
        
        var pager = state.pager;
        
        //数组数据处理
        if ($.isArray(data)) {
            data = {
                rows: data,
                total: data.length
            }
        } else {
            data.total = parseInt(data.total); //防止total是字符串
        }
        buildBody(target, data.rows);
        state.data = data;

		if(pagination) {
	        pager.pagination({
	            total: data.total
	        });
    	}
	        
        bindEvents(target);
        
        if (opts.onLoadSuccess) {
            opts.onLoadSuccess.call(target, data);
        }
    }
    
    function getRowIndex(target, row) {
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var rows = state.data.rows;
        var i;
        if (typeof row == 'object') {
            for (i = 0; i < rows.length; i++) {
	            if (rows[i] == row) {
	                return i;
	            }
	        }
        } else {
            for (i = 0; i < rows.length; i++) {
                if (rows[i][opts.idField] == row) {
                    return i;
                }
            }
        }
        return -1;
    };

    function getCheckedRows(target) {
        var state = $.data(target, 'datagrid');
        var table = state.table;
        var data = state.data;

        var rows = [];
        $('>tbody>tr>td>div.datagrid-cell-check>input[type="checkbox"]:checked', table).parent().parent().parent().each(function() {
            var index = parseInt($(this).attr('datagrid-row-index'));
            if (data.rows[index]) {
                rows.push(data.rows[index]);
            }
        });
        return rows;
    };

    function getSelectedRows(target) {
        var state = $.data(target, 'datagrid');
        var table = state.table;
        var data = state.data;

        var rows = [];
        $('>tbody>tr.datagrid-row-selected', table).each(function() {
            var index = parseInt($(this).attr('datagrid-row-index'));
            if (data.rows[index]) {
                rows.push(data.rows[index]);
            }
        });
        return rows;
    }

    /**
     * 清除全部选中记录
     */
    function clearSelections(target) {
    	var state = $.data(target, 'datagrid');
        var table = state.table;
        $('>tbody>tr.datagrid-row-selected', table).removeClass('datagrid-row-selected');
        $('>tbody>tr>td>div.datagrid-cell-check>input[type="checkbox"]', table).prop('checked', false);
    }

    /**
     * 根据索引选中记录,索引从这0开始
     */
    function selectRow(target, index) {
    	var state = $.data(target, 'datagrid');
        var table = state.table;
        var opts = state.options;
        var data = state.data;

        var tr = $('>tbody>tr[datagrid-row-index="' + index + '"]', table);
        clearSelections(target);
        tr.addClass('datagrid-row-selected');

        opts.onSelect.call(target, index, data.rows[index]);
    }

    /**
     * 请求远程数据
     */
    function request(target) {
        var state = $.data(target, 'datagrid');
        var opts = state.options;
        var pagination = opts.pagination;
        
        var pager = state.pager;

        if (!opts.url) {
            return false;
        }

        var param = $.extend({}, opts.queryParams);
        if (pagination) {
            $.extend(param, {
                page: opts.pageNumber,
                rows: opts.pageSize
            });
        }

		pager.pagination('loading');
        $.ajax({
            type: opts.method,
            url: opts.url,
            data: $.toJSON(param),
            contentType: 'application/json',
            dataType: 'json',
            success: function(data) {
            	pager.pagination('loaded');
                loadData(target, data);
            }
        });
    }
    
    function appendRow(target, row) {
    	var state = $.data(target, 'datagrid');
        var data = state.data;
        var pager = state.pager;
        
        data.rows.push(row);
        data.total += 1;
        
        buildBody(target, data.rows);

        pager.pagination({
            total: data.total
        });
     };
    
    function deleteRow(target, index) {
        var state = $.data(target, 'datagrid');
        var data = state.data;
        var pager = state.pager;
        
        data.rows.splice(index,1);
        
        data.total -= 1;
        
        buildBody(target, data.rows);

        pager.pagination({
            total: data.total
        });
    };
    
    function acceptChanges(target) {
		var state = $.data(target, 'datagrid');
	    var table = state.table;
	    var data = state.data;
	    $('>tbody>tr>td.datagrid-cell', table).find('input,select').each(function() {
	    	var jq = $(this);
	    	var td = jq.closest('td');
	    	var tr = td.closest('tr');
	    	var rowIndex = tr.attr('datagrid-row-index');
	    	var field = jq.attr('field');
	    	if(!field) {
	    		field = td.attr('field');
	    	}
	    	
	    	if(jq.is('input:checkbox')) {
	    		var jqOpts = $.parser.parseOptions(this);
	    		if(jq.is(':checked')) {
	    			data.rows[rowIndex][field] = jqOpts.on;
	    		} else {
	    			data.rows[rowIndex][field] = jqOpts.off;
	    		}
	    	} else {
	    		data.rows[rowIndex][field] = jq.val();
	    	}
	    });
	}

    $.fn.datagrid = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.datagrid.methods[options](this, param);
        }

        options = options || {};

        return this.each(function() {
            var state = $.data(this, 'datagrid');
            var opts;
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.datagrid.defaults, $.fn.datagrid.parseOptions(this), options);

                state = $.data(this, 'datagrid', {
                    options: opts,
                    data: {
                        total: 0,
                        rows: []
                    }
                });
                
                state.datagrid = $(this);
                if(opts.initDom) {
                	initDom(this);
                }
                
                var wrapResult = wrapGrid(this);
                if (!opts.columns) {
                    opts.columns = wrapResult.columns;
                }
            }
			
			buildToolbar(this);
            buildPagination(this);

            if (opts.data) {
                loadData(this, opts.data);
            }

            if (opts.url) {
                request(this);
            }

            bindEvents(this);
        });
    };

    $.fn.datagrid.methods = {
        options: function(jq) {
            return $.data(jq[0], 'datagrid').options;
        },
        reload: function(jq) {
            return jq.each(function() {
                request(this);
            });
        },
        loadData: function(jq, param) {
            return jq.each(function() {
                loadData(this, param);
            });
        },
        getData: function(jq) {
            return $.data(jq[0], 'datagrid').data;
        },
        getRows: function(jq) {
            return $.data(jq[0], 'datagrid').data.rows;
        },
        getRowIndex: function(jq, row) {
            return getRowIndex(jq[0], row);
        },
        getChecked: function(jq) {
            return getCheckedRows(jq[0]);
        },
        getSelected: function(jq) {
            var rows = getSelectedRows(jq[0]);
            return rows.length > 0 ? rows[0] : null;
        },
        clearSelections: function(jq) {
            return jq.each(function() {
                clearSelections(this);
            });
        },
        selectRow: function(jq, param) {
            return jq.each(function() {
                selectRow(this, param);
            });
        },
        appendRow: function(jq, row) {
            return jq.each(function() {
                appendRow(this, row);
            });
        },        
        deleteRow: function(jq, param) {
            return jq.each(function() {
                deleteRow(this, param);
            });
        },
        acceptChanges: function(jq) {
            return jq.each(function() {
                acceptChanges(this);
            });
        }
    };

    $.fn.datagrid.parseOptions = function(target) {
        return $.parser.parseOptions(target);
    };

    $.fn.datagrid.defaults = {
    	initDom: false,
        columns: null,
        toolbar: null,
        striped: false, //条纹
        method: 'post',
        idField: null,
        url: null,
        loadMsg: '正在处理，请稍待。。。',
        pagination: false,
        pageNumber: 1,
        pageSize: 10,
        pageList: [10, 20, 50, 100],
        queryParams: {},

        onLoadSuccess: function() {},
        onClickRow: function(rowIndex, rowData) {},
        onSelect: function(rowIndex, rowData) {},
        onCheck: function(rowIndex, rowData) {},
        onUncheck: function(rowIndex, rowData) {},
        onCheckAll: function(rows) {},
        onUncheckAll: function(rows) {}
    };
})(jQuery);
/**
 * accordion - jQuery xui
 *
 * Licensed under the GPL:
 *   http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
	
	function initDom(target) {
		var state = $.data(target, 'accordion');
		var panels = $(target).addClass('accordion').children('div').addClass('accordion-body').wrap('<div class="accordion-panel"></div>');
		panels.each(function(i, domEle) {
			var jq =  $(domEle);
			var title = jq.attr('title');
			
			var header = $('<div class="accordion-header"></div>').html(title);
			var icon = $('<div class="accordion-icon"></div>');
			if(jq.is(':visible')) {
				icon.addClass('accordion-collapse')
			} else {
				icon.addClass('accordion-expand')
			}
			icon.appendTo(header);
			
			jq.before(header).removeAttr('title');
		});
	}
		
	function bindEvents(target) {
		var state = $.data(target, 'accordion');
		state.panels = $('>.accordion-panel', target); //取panel
		
		var t = $(target);
				
		$('>.accordion-header', state.panels).unbind('.accordion').bind('click.accordion', function(){
			var index = state.panels.index($(this).parent());
			toggle(target, index);
		});
	}
	
	function toggle(target, which) {
		var state = $.data(target, 'accordion');
		var panels = state.panels;
		
		var panel = panels[which]; //dom
		var h = $('>.accordion-header', panel);
		var b = $('>.accordion-body', panel);
		
		if(b.is(':visible')) {
			collapse(target, which);
		} else {
			expand(target, which);
		}
	}
	
	function expand(target, which) {
		var state = $.data(target, 'accordion');
		var panels = state.panels;
		var opts = state.options;
		
		var panel = panels[which]; //dom
		var h = $('>.accordion-header', panel);
		var b = $('>.accordion-body', panel);
		
		b.slideDown('fast');
		h.children('.accordion-icon').removeClass('accordion-expand').addClass('accordion-collapse');
		
		if(!opts.multiple) {
			state.panels.each(function(i) {
				if(i != which) {
					collapse(target, i);
				}
			});
		}
	}
	
	function collapse(target, which) {
		var state = $.data(target, 'accordion');
		var panels = state.panels;
		
		var panel = panels[which]; //dom
		var h = $('>.accordion-header', panel);
		var b = $('>.accordion-body', panel);
		
		b.slideUp('fast');
		h.children('.accordion-icon').removeClass('accordion-collapse').addClass('accordion-expand');
	}
	
	function expandAll(target, which) {
		var state = $.data(target, 'accordion');
		var panels = state.panels;
		var opts = state.options;
		
		if(opts.multiple) {
			panels.each(function(i) {
				expand(target, i);
			});
		}
	}
	
	function collapseAll(target, which) {
		var state = $.data(target, 'accordion');
		var panels = state.panels;
		
		panels.each(function(i) {
			collapse(target, i);
		});
	}
	
    $.fn.accordion = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.accordion.methods[options](this, param);
        }
        options = options || {};
        return this.each(function() {
            var opts;
            var state = $.data(this, 'accordion');
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.accordion.defaults, $.fn.accordion.parseOptions(this), options);
                $.data(this, 'accordion', {
                    options: opts
                });
                
                if(opts.initDom) {
                	initDom(this);
                }
            }
            
            bindEvents(this);
        });
    };

    $.fn.accordion.methods = {
        options: function(jq) {
            return $.data(jq[0], 'accordion').options;
        },
        expand: function(jq, which) {
            return jq.each(function() {
                expand(this, which);
            });
        },
        collapse: function(jq, which) {
            return jq.each(function() {
                collapse(this, which);
            });
        },
        expandAll: function(jq) {
            return jq.each(function() {
                expandAll(this);
            });
        },
        collapseAll: function(jq) {
            return jq.each(function() {
                collapseAll(this);
            });
        }    
    };

    $.fn.accordion.parseOptions = function(target) {
        return $.extend({}, $.parser.parseOptions(target));
    };

    $.fn.accordion.defaults = {
    	initDom: false,
        multiple: true
    };

})(jQuery);/**
 * tabs - jQuery xui
 *
 * Licensed under the GPL: http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
	
	function initDom(target) {
		var state = $.data(target, 'tabs');
		var panels = $(target).addClass('tabs').children('div').addClass('tabs-panel').wrapAll('<div class="tabs-panels"></div>');
		var nav = $('<ul class="tabs-nav"></ul>');
		panels.each(function(i, domEle) {
			var panelOpts = $.parser.parseOptions(domEle);
			var jq = $(domEle);
			var title = jq.attr('title');
			var li = $('<li></li>').html(title);
			if(panelOpts.closable) {
				li.append('<a class="tabs-close" href="javascript:void(0)">×</a>');
			}
			nav.append(li);			
		});
		
		$('<div class="tabs-header"></div>').append(nav).prependTo(target);
	}
	
	function init(target) {
    	var state = $.data(target, 'tabs');
        var titles = $('>div.tabs-header>ul>li', target);
        var panels = $('>div.tabs-panels>div', target);
        state.titles = titles;
        state.panels = panels;
    }

    function bindEvents(target) {
        var t = $(target);
        var state = $.data(target, 'tabs');
        var opts = state.options;
        
        var titles = state.titles;
        var panels = state.panels;

		titles.unbind('.tabs').bind('click.tabs', function() {
			var index = titles.index(this);
           
			selectTab(target, index);
        });
        
        $('.tabs-close', titles).unbind('.tabs').bind('click.tabs', function(e) {
        	e.stopPropagation();
			
			var p = $(this).parent();
			var index = titles.index(p);
           
			closeTab(target, index);
        });
    }
    
    
    
    function getTab(target, which) {
        var state = $.data(target, 'tabs');
        var panels = state.panels;
		
        return panels.eq(which);
    }
    
    function selectTab(target, which) {
        var t = $(target);
        var state = $.data(target, 'tabs');
        var opts = state.options;
        
        var titles = state.titles;
        var panels = state.panels;
        
        titles.removeClass('tabs-selected');
		titles.eq(which).addClass('tabs-selected');
		
		panels.hide();
        panels.eq(which).show();
        
        opts.onSelect.call(target, titles.eq(which).text(), which);
    }
    
	function closeTab(target, which) {
        var t = $(target);
        var state = $.data(target, 'tabs');
        var opts = state.options;
        
        var titles = state.titles;
        var panels = state.panels;
        
        var isSelected = titles.eq(which).hasClass('tabs-selected');
        
		titles.eq(which).remove();
        panels.eq(which).remove();
        
        //更新titles,panels
        state.titles = titles.not(':eq('+which+')');
        state.panels = panels.not(':eq('+which+')');
        
        if(isSelected) {
        	selectTab(target, 0);
        }
    }

    $.fn.tabs = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.tabs.methods[options](this, param);
        }

        options = options || {};

        return this.each(function() {
            var state = $.data(this, 'tabs');
            var opts;
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.tabs.defaults, $.fn.tabs.parseOptions(this), options);
                $.data(this, 'tabs', {
                    options: opts
                });
                if(opts.initDom) {
                	initDom(this);
                }
                init(this);
                selectTab(this, 0);
            }

            bindEvents(this);
        });
    };

    $.fn.tabs.methods = {
    	options: function(jq) {
            var cc = jq[0];
            var opts = $.data(cc, 'tabs').options;
            var s = getSelectedTab(cc);
            opts.selected = s ? getTabIndex(cc, s) : -1;
            return opts;
        },
        getTab: function(jq, which){
			return getTab(jq[0], which);
		},
    	select: function(jq, which) {
            return jq.each(function() {
                selectTab(this, which);
            });
        }
    };

    $.fn.tabs.parseOptions = function(target) {
        return $.extend({}, $.parser.parseOptions(target));
    };

    $.fn.tabs.defaults = {
    	initDom: false,
    	onSelect: function(title, index) {}
    };
})(jQuery);/**
 * dialog - jQuery xui
 *
 * Licensed under the GPL:
 *   http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {
	
	function initDom(target) {
		var state = $.data(target, 'dialog');
        var opts = state.options;
        var t = $(target).addClass('dialog-body');
        var dlg = $('<div class="dialog">'
        	+ '<div class="dialog-header"></div>'
        	+ '<div class="dialog-view"></div>'
        	+ '</div>');
        state.dialog = dlg;
        
        $('>.dialog-header', dlg).html(opts.title);
        if(opts.closable) {
        	$('>.dialog-header', dlg).append('<a class="dialog-close" href="javascript:void(0)"></a>');
        }
        t.after(dlg);
        $('>.dialog-view', dlg).append(t);
	}

    function init(target) {
        var state = $.data(target, 'dialog');
        var opts = state.options;
        var dialog = state.dialog;
        
        dialog.css({
            zIndex: opts.zIndex
        });

        state.mask = $('<div class="dialog-mask"></div>').appendTo('body');
        
        if(opts.toolbar) {
        	$(opts.toolbar).addClass('dialog-toolbar').prependTo($('>div.dialog-view', dialog));
        }
        
        if(opts.buttons) {
        	$(opts.buttons).addClass('dialog-button').appendTo($('>div.dialog-view', dialog));
        }

        $('>div.dialog-view>div.dialog-toolbar>a.l-btn', dialog).linkbutton();
        $('>div.dialog-view>div.dialog-button>a.l-btn', dialog).linkbutton();
    }

    function setSize(target) {
        var state = $.data(target, 'dialog');
        var opts = state.options;
        
        if(opts.modal) {
        	state.mask.css(getPageArea());
    	}
    }

    function bindEvents(target) {
    	var state = $.data(target, 'dialog');
        var opts = state.options;
        var dialog = state.dialog;

        $('>div.dialog-header>.dialog-close', dialog).unbind('.dialog').bind('click.dialog', function() {
            close(target);
        });

		if(opts.modal) {
	        dialog.unbind('.dialog').bind('_resize.dialog', function() {
	            if (dialog.is(':visible')) {
	                setSize(target);
	                center(target);
	            }
	        });
    	}
    }

    function open(target) {
        var state = $.data(target, 'dialog');
		var opts = state.options;
		var dialog = state.dialog;
		setSize(target);
		if(opts.modal) {
        	state.mask.show();
    	}
        dialog.show();
    }

    function close(target) {
        var state = $.data(target, 'dialog');
        var opts = state.options;
        var dialog = state.dialog;
		if(opts.modal) {
        	state.mask.hide();
    	}
        dialog.hide();
        opts.onClose.call(target);
    }

    function center(target) {
        var state = $.data(target, 'dialog');
        var dialog = state.dialog;
        var position = {};
        var width = dialog.width();
        var height = dialog.height();
        position.left = Math.ceil(($(window).width() - width) / 2 + $(document).scrollLeft());
        position.top = Math.ceil(($(window).height() - height) / 2 + $(document).scrollTop());

        dialog.css({
            left: position.left,
            top: position.top
        });
    }

    function getPageArea() {
        return {
            //width: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),
            //height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
            //width: $(window).width() + $(document).scrollLeft(),
			//height: $(window).height() + $(document).scrollTop()
			
			width: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),
            height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
        }
    }

    $.fn.dialog = function(options, param) {
        if (typeof options == 'string') {
            if (typeof options == 'string') {
                return $.fn.dialog.methods[options](this, param);
            }
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this, 'dialog');
            var opts;
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.dialog.defaults, $.fn.dialog.parseOptions(this), options);
                state = $.data(this, 'dialog', {
                    options: opts
                });
                
                state.dialog = $(this);
				if(opts.initDom) {
					initDom(this);
				}
                init(this);
            }
            bindEvents(this);

            if (!opts.closed) {
                open(this);
            }
        });
    };


    $.fn.dialog.methods = {
        options: function(jq) {
            return $.data(jq[0], 'dialog').options;
        },
        open: function(jq) {
            return jq.each(function() {
                open(this);
            });
        },
        close: function(jq) {
            return jq.each(function() {
                close(this);
            });
        },
        center: function(jq) {
            return jq.each(function() {
                center(this);
            });
        }
    };

    $.fn.dialog.parseOptions = function(target) {
        return $.extend({}, $.parser.parseOptions(target,['title']));
    };

    $.fn.dialog.defaults = {
    	initDom: false,
    	title: '对话框',
    	toolbar: null,
    	buttons: null,
        zIndex: 1000,
        closable: true,
        closed: true,
        modal: true,
        onClose: function() {
        }
    };
})(jQuery);
/**
 * messager - jQuery xui
 *
 * Licensed under the GPL:
 *   http://www.gnu.org/licenses/gpl.txt
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 * 依赖
 *	dialog
 */
(function($) {

    function show(dlg, type, speed, timeout) {
        if (!dlg) return;

        dlg.css('z-index', $.fn.dialog.defaults.zIndex++);
        switch (type) {
            case null:
                dlg.show();
                break;
            case 'slide':
                dlg.slideDown(speed);
                break;
            case 'fade':
                dlg.fadeIn(speed);
                break;
            case 'show':
                dlg.show(speed);
                break;
        }

        var timer = null;
        if (timeout > 0) {
            timer = setTimeout(function() {
                hide(dlg, type, speed);
            }, timeout);
        }
        dlg.hover(
            function() {
                if (timer) {
                    clearTimeout(timer);
                }
            },
            function() {
                if (timeout > 0) {
                    timer = setTimeout(function() {
                        hide(dlg, type, speed);
                    }, timeout);
                }
            }
        )
    }

    function hide(dlg, type, speed) {
        if (!dlg) return;

        switch (type) {
            case null:
                dlg.hide();
                break;
            case 'slide':
                dlg.slideUp(speed);
                break;
            case 'fade':
                dlg.fadeOut(speed);
                break;
            case 'show':
                dlg.hide(speed);
                break;
        }

        setTimeout(function() {
            dlg.remove();
        }, speed);
    }

    function buildDialog(title, content, buttons) {

        var dlg = $('<div class="dialog">' +
            '<div class="dialog-header">' +
            title +
            '<a class="dialog-close" href="javascript:void(0)"></a>' +
            '</div>' +
            '<div class="dialog-view">' +
            '<div class="dialog-body" style="padding: 10px;">' +
            content +
            '</div>' +
            '</div>' +
            '</div>').appendTo('body');


        if (buttons) {
            var tb = $('<div class="messager-button"></div>').appendTo($('>div.dialog-view>div.dialog-body', dlg));
            for (var text in buttons) {

                $('<a class="l-btn" href="javascript:void(0)">' +
                    '<span class="l-btn-left">' +
                    '<span class="l-btn-text">' +
                    text +
                    '</span>' +
                    '</span>' +
                    '</a>').appendTo(tb).bind('click', buttons[text]).linkbutton();
            }
        }

        return dlg;
    }

    $.messager = {
        show: function(options) {
            var opts = $.extend({
                showType: 'slide',
                showSpeed: 600,
                width: 250,
                height: 100,
                msg: '',
                title: '',
                timeout: 4000,
                style: {
                }
            }, options || {});
            	
            dlg = buildDialog(opts.title, opts.msg, null);
            dlg.dialog({
            	modal: false
            });
            show(dlg, opts.showType, opts.showSpeed, opts.timeout);
            $('>.dialog-view>.dialog-body', dlg)._outerWidth(opts.width-14)._outerHeight(opts.height-36);
            dlg.css(opts.style);
        },
        alert: function(title, msg, icon, fn) {
        	var dlg;
            var content = '<div class="messager-icon messager-' + icon + '"></div><div>' + msg + '</div>';

            content += '<div style="clear:both;"></div>';

            var buttons = {};
            buttons[$.messager.defaults.ok] = function() {
                dlg.dialog('close');
                if (fn) {
                    fn();
                    return false;
                }
            };
            dlg = buildDialog(title, content, buttons);
            $('>.dialog-view>.dialog-body', dlg)._outerWidth(250);
            dlg.dialog().dialog('open').dialog('center');
        },
        confirm: function(title, msg, fn) {
        	var dlg;
            var content = '<div class="messager-icon messager-question"></div>' + '<div>' + msg + '</div><div style="clear:both;"></div>';
            var buttons = {};
            buttons[$.messager.defaults.ok] = function() {
                dlg.dialog('close');
                if (fn) {
                    fn(true);
                    return false;
                }
            };
            buttons[$.messager.defaults.cancel] = function() {
                dlg.dialog('close');
                if (fn) {
                    fn(false);
                    return false;
                }
            };
            dlg = buildDialog(title, content, buttons);
            $('>.dialog-view>.dialog-body', dlg)._outerWidth(250);
            dlg.dialog().dialog('open').dialog('center');
        }
    };

    $.messager.defaults = {
        ok: '确认',
        cancel: '取消'
    };

})(jQuery);/**
 * datebox wrap My97DatePicker - jQuery xui
 *
 * Licensed under the Apache v2
 *
 * Copyright 2015 xjb [ beymy.en@gmail.com ]
 *
 */
(function($) {

    function init(target) {
        var state = $.data(target, 'datebox');
        var opts = state.options;

        $(target).addClass('Wdate datebox-f').validatebox($.extend({
            required: opts.required,
            validType: opts.validType,
            novalidate: opts.novalidate
        }, opts.validateOptions));
    }

    function bindEvents(target) {
        var state = $.data(target, 'datebox');
        var opts = state.options;
		var t = $(target);
		
        //先取消绑定事件
        t.unbind('.datebox');

        if (!opts.disabled) {
			t.bind(opts.showEvent+'.datebox', function() {
				window.WdatePicker(opts.datePickerOptions);
			});
        }
    }

    function setDisabled(target, disabled) {
        var state = $.data(target, 'datebox');
        var opts = state.options;
		var t = $(target);
		
        if (disabled) {
            opts.disabled = true;
            t.attr('readonly', 'readonly');
        } else {
            opts.disabled = false;
            t.removeAttr('readonly');
        }
    }

    $.fn.datebox = function(options, param) {
        if (typeof options == 'string') {
            return $.fn.datebox.methods[options](this, param);
        }

        options = options || {};
        return this.each(function() {
            var state = $.data(this, 'datebox');
            var opts;
            if (state) {
                opts = $.extend(state.options, options);
            } else {
                opts = $.extend({}, $.fn.datebox.defaults, $.fn.datebox.parseOptions(this), options);
                $.data(this, 'datebox', {
                    options: opts
                });

                init(this);
            }

            setDisabled(this, opts.disabled);
            //setSize(this);
            bindEvents(this);
        });
    };


    $.fn.datebox.methods = {
        options: function(jq) {
            return $.data(jq[0], 'datebox').options;
        },
        disable: function(jq) {
            return jq.each(function() {
                setDisabled(this, true);
                bindEvents(this);
            });
        },
        enable: function(jq) {
            return jq.each(function() {
                setDisabled(this, false);
                bindEvents(this);
            });
        }
    };

    $.fn.datebox.parseOptions = function(target) {
        return $.extend({}, $.parser.parseOptions(target));
    };

    $.fn.datebox.defaults = {
    	showEvent: 'focus',
        validateOptions: {
            handler: {
                tip: function(target) {
                    //返回jquery对象
                    return $(target);
                }
            }
        },
        datePickerOptions: {
        }
    };
})(jQuery);